//reinawork
import 'package:flutter/material.dart';
import 'package:responsive_sizer/responsive_sizer.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../../../core/constants/app_colors.dart';

class NewEntryScreen extends StatefulWidget {
  final bool isEditing;
  final Map<String, dynamic>? entry;

  const NewEntryScreen({super.key, this.isEditing = false, this.entry});

  @override
  State<NewEntryScreen> createState() => _NewEntryScreenState();
}

class _NewEntryScreenState extends State<NewEntryScreen> {
  final TextEditingController _entryController = TextEditingController();
  IconData? selectedMood;

  @override
  void initState() {
    super.initState();
    if (widget.isEditing && widget.entry != null) {
      _entryController.text = widget.entry!['content'];
      final moodLabel = widget.entry!['mood'];
      selectedMood =
          moods.firstWhere((m) => m['label'] == moodLabel)['icon'] as IconData?;
    }
  }

  final moods = [
    {'icon': Icons.sentiment_very_satisfied, 'label': 'Happy'},
    {'icon': Icons.sentiment_satisfied, 'label': 'Content'},
    {'icon': Icons.sentiment_neutral, 'label': 'Neutral'},
    {'icon': Icons.sentiment_dissatisfied, 'label': 'Sad'},
    {'icon': Icons.sentiment_very_dissatisfied, 'label': 'Angry'},
  ];

  void _saveEntry() async {
    final entryText = _entryController.text.trim();
    if (entryText.isEmpty || selectedMood == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Please write something and pick a mood."),
        ),
      );
      return;
    }

    try {
      final user = Supabase.instance.client.auth.currentUser;
      if (user == null) throw "Not logged in.";

      final selectedMoodLabel =
          moods.firstWhere((m) => m['icon'] == selectedMood)['label'];

      if (widget.isEditing && widget.entry != null) {
        await Supabase.instance.client
            .from('journal_entries')
            .update({'content': entryText, 'mood': selectedMoodLabel})
            .eq('id', widget.entry!['id']);
      } else {
        // Insert new entry
        await Supabase.instance.client.from('journal_entries').insert({
          'user_id': user.id,
          'content': entryText,
          'mood': selectedMoodLabel, // Save as 'Happy', 'Sad', etc.
        });
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(widget.isEditing ? "Entry updated." : "Entry saved."),
        ),
      );
      Navigator.pop(context);
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text("Error: $e")));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        width: 100.w,
        height: 100.h,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [AppColors.darkBlue, AppColors.lightBlue],
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: 5.w),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(height: 2.h),
                Text(
                  "How was your day?",
                  style: TextStyle(
                    fontSize: 20.sp,
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 2.h),
                TextField(
                  controller: _entryController,
                  maxLines: 5,
                  style: const TextStyle(color: Colors.white),
                  decoration: InputDecoration(
                    hintText: "Write your thoughts...",
                    hintStyle: const TextStyle(color: Colors.white54),
                    filled: true,
                    fillColor: Colors.white.withOpacity(0.1),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide.none,
                    ),
                  ),
                ),
                SizedBox(height: 3.h),
                Text(
                  "Select your mood",
                  style: TextStyle(
                    fontSize: 17.sp,
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                SizedBox(height: 1.h),
                Wrap(
                  spacing: 3.w,
                  children:
                      moods.map((mood) {
                        return GestureDetector(
                          onTap: () {
                            setState(
                              () => selectedMood = mood['icon'] as IconData,
                            );
                          },
                          child: CircleAvatar(
                            backgroundColor:
                                selectedMood == mood['icon']
                                    ? Colors.white
                                    : Colors.white24,
                            child: Icon(
                              mood['icon'] as IconData,
                              color: AppColors.darkBlue,
                            ),
                          ),
                        );
                      }).toList(),
                ),
                const Spacer(),
                Center(
                  child: ElevatedButton(
                    onPressed: _saveEntry,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: AppColors.darkBlue,
                    ),
                    child: const Text("Save Entry"),
                  ),
                ),
                SizedBox(height: 3.h),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
