//jihane,reina,jana
import 'package:daily_journal_app/screens/entry_details_screen.dart';
import 'package:daily_journal_app/screens/setting_screen.dart';
import 'package:flutter/material.dart';
import 'package:responsive_sizer/responsive_sizer.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../../../core/constants/app_colors.dart';
import '../widgets/entry_card.dart';
import 'new_entry_screen.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  List<dynamic> entries = [];
  List<dynamic> filteredEntries = [];
  bool isLoading = true;
  String? selectedDate;

  @override
  void initState() {
    super.initState();
    fetchEntries();
  }

  Future<void> fetchEntries() async {
    final user = Supabase.instance.client.auth.currentUser;
    if (user == null) return;

    final response = await Supabase.instance.client
        .from('journal_entries')
        .select()
        .eq('user_id', user.id)
        .order('created_at', ascending: false);

    setState(() {
      entries = response;
      filteredEntries = response;
      isLoading = false;
    });
  }

  void filterByDate(String? date) {
    if (date == null || date == 'All') {
      setState(() => filteredEntries = entries);
    } else {
      setState(() {
        filteredEntries =
            entries
                .where((e) => e['created_at'].toString().split('T')[0] == date)
                .toList();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final dates =
        [
          'All',
          ...{for (var e in entries) e['created_at'].toString().split('T')[0]},
        ].toSet().toList();

    return Scaffold(
      body: Container(
        width: 100.w,
        height: 100.h,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [AppColors.darkBlue, AppColors.lightBlue],
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: 5.w, vertical: 2.h),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "My Journal",
                      style: TextStyle(
                        fontSize: 22.sp,
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    IconButton(
                      icon: const Icon(Icons.settings, color: Colors.white),
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (_) => const SettingsScreen(),
                          ),
                        );
                      },
                    ),
                  ],
                ),

                SizedBox(height: 1.h),

                DropdownButton<String>(
                  dropdownColor: AppColors.darkBlue,
                  value: selectedDate ?? 'All',
                  onChanged: (value) {
                    setState(() => selectedDate = value);
                    filterByDate(value);
                  },
                  items:
                      dates
                          .map(
                            (d) => DropdownMenuItem(
                              value: d,
                              child: Text(
                                d,
                                style: const TextStyle(color: Colors.white),
                              ),
                            ),
                          )
                          .toList(),
                ),
                SizedBox(height: 2.h),
                Expanded(
                  child:
                      isLoading
                          ? const Center(child: CircularProgressIndicator())
                          : filteredEntries.isEmpty
                          ? const Center(
                            child: Text(
                              "No entries found.",
                              style: TextStyle(color: Colors.white70),
                            ),
                          )
                          : ListView.builder(
                            itemCount: filteredEntries.length,
                            itemBuilder: (context, index) {
                              final entry = filteredEntries[index];
                              return EntryCard(
                                date:
                                    entry['created_at'].toString().split(
                                      'T',
                                    )[0],
                                moodEmoji: _emojiFromMood(entry['mood']),
                                summary: entry['content'],
                                onEdit: () async {
                                  await Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder:
                                          (_) => NewEntryScreen(
                                            isEditing: true,
                                            entry: entry,
                                          ),
                                    ),
                                  );
                                  fetchEntries(); // refresh after edit
                                },
                                onDelete: () async {
                                  final confirm = await showDialog<bool>(
                                    context: context,
                                    builder:
                                        (_) => AlertDialog(
                                          title: const Text("Delete Entry"),
                                          content: const Text(
                                            "Are you sure you want to delete this entry?",
                                          ),
                                          actions: [
                                            TextButton(
                                              onPressed:
                                                  () => Navigator.pop(
                                                    context,
                                                    false,
                                                  ),
                                              child: const Text("Cancel"),
                                            ),
                                            TextButton(
                                              onPressed:
                                                  () => Navigator.pop(
                                                    context,
                                                    true,
                                                  ),
                                              child: const Text("Delete"),
                                            ),
                                          ],
                                        ),
                                  );
                                  if (confirm == true) {
                                    await Supabase.instance.client
                                        .from('journal_entries')
                                        .delete()
                                        .eq('id', entry['id']);
                                    fetchEntries();
                                  }
                                },
                                onTap: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder:
                                          (_) => EntryDetailScreen(
                                            date:
                                                entry['created_at']
                                                    .toString()
                                                    .split('T')[0],
                                            moodEmoji: _emojiFromMood(
                                              entry['mood'],
                                            ),
                                            summary: entry['content'],
                                            fullContent:
                                                entry['content'], // You can customize to show a full entry if necessary
                                          ),
                                    ),
                                  );
                                },
                              );
                            },
                          ),
                ),
              ],
            ),
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Colors.white,
        onPressed: () async {
          await Navigator.push(
            context,
            MaterialPageRoute(builder: (_) => const NewEntryScreen()),
          );
          fetchEntries(); // refresh after returning
        },
        child: const Icon(Icons.edit, color: AppColors.darkBlue),
      ),
    );
  }

  String _emojiFromMood(String? mood) {
    switch (mood) {
      case "Happy":
        return '😊';
      case "Content":
        return '🙂';
      case "Neutral":
        return '😐';
      case "Sad":
        return '😞';
      case "Angry":
        return '😠';
      default:
        return '❓';
    }
  }
}
